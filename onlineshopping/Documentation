Documentation


DAY 1:-

Created the maven Web-app front-end,
Add Spring MVC dependencies,
Created the MVC structure:- com.abhi.onlineshopping.controller, web-inf/views/page.jsp
[Bootstrap 3]
Created web.xml
Created dispatcher-servlet.xml



DAY 2:-

Created the maven quick start back end project,
Add dependencies in back-end pom.xml,
{spring-core, spring-web, spring-tx, hibernate-core, entitymanager, validator, etc }.Also added the backend pom jar to front-end pom.                                                                                                
Created com.abhi.shoppingbackend.model, com.abhi.shoppingbackend.config, com.abhi.shoppingbackend.dao, com.abhi.shoppingbackend.dao.impl packages.


DAY 3:-

Configured HibernateConfig.java
    a) created autowired beans for database connectivity
    b) created autowired beans for Hibernate dialect and syntax
    c) created autowired beans for Hibernate transaction management



DAY 4:-

Create the User, Address, Cart, Cartline, Product, Orderdetail, Orderitem, Category, model class, 
Create the table in H2
Create CRUD method in DAO--> Defined it in DaoImpl


DAY 5:-

Add the autowired DaoImpl bean in HibernateConfig.java
Created the register web-flow to direct user to fill up forms for address as per the attributed in User,Address class using Spring form


DAY 6:-

Created the  controller methods to save the registration data by   taking it from spring form and sending it as user object parameter to  CRUD method of DaoImpl.
Created the supplier and category tables in H2.
Created Supplier and Category Dao, DaoImpl.
Included Supplier and Category  DaoImpl @Autowired bean in  HibernateConfig.java.




DAY 7:-

Created manageProduct.jsp (SPA) with supplier and category tab and forms.
Created controller methods for Supplier and Category CRUD.
Performed CRUD operations for Supplier and Category.
	insert()
	retrieve<ArrayList>()
	getByID()


DAY 8:-
	
Created Product.java(MultipartFile-->Transient), ProductDao.java, ProductDaoImpl.java
	insert()
	retrieve<ArrayList>()
	getByID()


DAY 9:-

Add product form in the of SPA along with multipart file upload option.
 Create the controller methods for calling all the crud operations.




DAY 10:-

Create the login.jsp
Create the login option in header.jsp on top navbar
Write the controller method to go to the login.jsp(String	+@RequestMapping)


DAY 11:-

Implement spring security in xml configuration file to intercept every user request and check the authenticationa and authorization of user.
Add spring security dependencies in pom.xml
Add the filterChainProxy class in web.xml
Add the filter-mapping of security class in web.xml


DAY 12:-

Modify all CRUD operation URLs and prefix "/admin" to each of the URLs
Add the userLogged() and error() in adminController()
Display the username/email/id on the top navbar once any user logs in
	(hint: use--> userPrincipal.name in header.jsp)
Create the CategoryList dropdown on top navbar which will be populated by category names. Clicking on each category should take us to productCustList.jsp having the filtered product list based on category id.



DAY 13:-

Created Cart.java and Order.java
Created CartDao.java and OrderDao.java


DAY 14:-

Created CartDaoImpl.java and CartDaoImpl.java
Added the annotated Cart and Order model class in hiberConfig.java

DAY 15:-

Added the cart.jsp
Created checkout flow to maintain the logical flow of form where user could select at which address product should be delivered.


DAY 16:-

Added cart controller for /prodDetails,/addToCart, /checkout,/invoice, /deletePCart,/goToCart/Orderprocess
Added cart in header.jsp



DAY 17:-

Add hibernate/java validation dependencies in your pom.xml and add the validation annotation in your model classes of Category/Product/Supplier/User against every relevant attribute. {@Size,@NotNull, @Len, @Pattern}

DAY 18:-

You will add the BindingResult object and @Valid annotation in the Controller method where you are using those attributes for any CRUD operation.
Create css, and js on JSP pages for all forms to show error messages if invalid data in entered.

